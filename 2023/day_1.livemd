# advent of code

```elixir
Mix.install([
  {:kino, "~> 0.12.0"}
])

input = Kino.Input.textarea("input")
```

## part 1

```elixir
calibrations =
  Kino.Input.read(input)
  |> String.split("\n", trim: true)
```

```elixir
calibrations
|> Enum.map(fn calibration ->
  only_number_string = Regex.replace(~r/[^\d]/, calibration, "")
  first = only_number_string |> String.at(0)
  last = only_number_string |> String.at(-1)

  "#{first}#{last}" |> String.to_integer()
end)
|> Enum.sum()
```

## part2

```elixir
defmodule Day01.Part2.Solve1 do
  @number_words ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine"]
                |> Enum.with_index(1)
  @number_strings 1..9 |> Enum.map(&{Integer.to_string(&1), &1})

  @number_matches @number_words ++ @number_strings

  def recover(calibration) do
    [
      {&String.starts_with?/2, 1..-1},
      {&String.ends_with?/2, 0..-2}
    ]
    |> Enum.map(fn {match_fun, slice_range} ->
      do_recover(calibration, match_fun, slice_range)
    end)
    |> then(fn [first, last] -> "#{first}#{last}" |> String.to_integer() end)
  end

  # 정방향, 역방향
  def do_recover(calibration, match_fun, slice_range) do
    @number_matches
    |> Enum.find_value(fn {number_match, number} ->
      case calibration |> match_fun.(number_match) do
        true -> number
        false -> nil
      end
    end)
    |> case do
      nil -> do_recover(calibration |> String.slice(slice_range), match_fun, slice_range)
      number -> number
    end
  end
end

calibrations
|> Enum.map(fn calibration ->
  Day01.Part2.Solve1.recover(calibration)
end)
|> Enum.sum()
```
